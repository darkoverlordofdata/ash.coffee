// Generated by CoffeeScript 1.9.0
(function() {
  'use strict';
  var AsteroidCollisionNode, GameNode, WaitForStartNode,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  WaitForStartNode = asteroids.nodes.WaitForStartNode;

  AsteroidCollisionNode = asteroids.nodes.AsteroidCollisionNode;

  GameNode = asteroids.nodes.GameNode;

  asteroids.systems.WaitForStartSystem = (function(_super) {
    __extends(WaitForStartSystem, _super);

    WaitForStartSystem.prototype.engine = null;

    WaitForStartSystem.prototype.creator = null;

    WaitForStartSystem.prototype.gameNodes = null;

    WaitForStartSystem.prototype.waitNodes = null;

    WaitForStartSystem.prototype.asteroids = null;

    function WaitForStartSystem(_at_creator) {
      this.creator = _at_creator;
      this.update = __bind(this.update, this);
    }

    WaitForStartSystem.prototype.addToEngine = function(engine) {
      this.engine = engine;
      this.waitNodes = engine.getNodeList(WaitForStartNode);
      this.gameNodes = engine.getNodeList(GameNode);
      this.asteroids = engine.getNodeList(AsteroidCollisionNode);
    };

    WaitForStartSystem.prototype.removeFromEngine = function(engine) {
      this.waitNodes = null;
      this.gameNodes = null;
    };

    WaitForStartSystem.prototype.update = function(time) {
      var asteroid, game, node;
      node = this.waitNodes.head;
      game = this.gameNodes.head;
      if (node && node.wait.startGame && game) {
        asteroid = this.asteroids.head;
        while (asteroid) {
          this.creator.destroyEntity(asteroid.entity);
          asteroid = asteroid.next;
        }
        game.state.setForStart();
        node.wait.startGame = false;
        this.engine.removeEntity(node.entity);
      }
    };

    return WaitForStartSystem;

  })(ash.core.System);

}).call(this);

//# sourceMappingURL=wait_for_start_system.js.map
