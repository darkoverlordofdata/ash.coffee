// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var MovementNode,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  MovementNode = asteroids.nodes.MovementNode;

  asteroids.systems.MovementSystem = (function(superClass) {
    extend(MovementSystem, superClass);

    MovementSystem.prototype.config = null;

    function MovementSystem(config) {
      this.config = config;
      this.updateNode = bind(this.updateNode, this);
      MovementSystem.__super__.constructor.call(this, MovementNode, this.updateNode);
    }

    MovementSystem.prototype.updateNode = function(node, time) {
      var motion, position, xDamp, yDamp;
      position = node.position;
      motion = node.motion;
      position.position.x += motion.velocity.x * time;
      position.position.y += motion.velocity.y * time;
      if (position.position.x < 0) {
        position.position.x += this.config.width;
      }
      if (position.position.x > this.config.width) {
        position.position.x -= this.config.width;
      }
      if (position.position.y < 0) {
        position.position.y += this.config.height;
      }
      if (position.position.y > this.config.height) {
        position.position.y -= this.config.height;
      }
      position.rotation += motion.angularVelocity * time;
      if (motion.damping > 0) {
        xDamp = Math.abs(Math.cos(position.rotation) * motion.damping * time);
        yDamp = Math.abs(Math.sin(position.rotation) * motion.damping * time);
        if (motion.velocity.x > xDamp) {
          motion.velocity.x -= xDamp;
        } else if (motion.velocity.x < -xDamp) {
          motion.velocity.x += xDamp;
        } else {
          motion.velocity.x = 0;
        }
        if (motion.velocity.y > yDamp) {
          motion.velocity.y -= yDamp;
        } else if (motion.velocity.y < -yDamp) {
          motion.velocity.y += yDamp;
        } else {
          motion.velocity.y = 0;
        }
      }
    };

    return MovementSystem;

  })(ash.tools.ListIteratingSystem);

}).call(this);

//# sourceMappingURL=movement_system.js.map
