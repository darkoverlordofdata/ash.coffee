// Generated by CoffeeScript 1.9.3

/*
 * Represents a state for a SystemStateMachine. The state contains any number of SystemProviders which
 * are used to add Systems to the Engine when this state is entered.
 */

(function() {
  'use strict';
  var DynamicSystemProvider, StateSystemMapping, SystemInstanceProvider, SystemSingletonProvider;

  SystemInstanceProvider = ash.fsm.SystemInstanceProvider;

  SystemSingletonProvider = ash.fsm.SystemSingletonProvider;

  DynamicSystemProvider = ash.fsm.DynamicSystemProvider;

  StateSystemMapping = ash.fsm.StateSystemMapping;

  ash.fsm.EngineState = (function() {
    EngineState.prototype.providers = null;

    function EngineState() {
      this.providers = [];
    }


    /*
     * Creates a mapping for the System type to a specific System instance. A
     * SystemInstanceProvider is used for the mapping.
     *
     * @param system The System instance to use for the mapping
     * @return This StateSystemMapping, so more modifications can be applied
     */

    EngineState.prototype.addInstance = function(system) {
      return this.addProvider(new SystemInstanceProvider(system));
    };


    /*
     * Creates a mapping for the System type to a single instance of the provided type.
     * The instance is not created until it is first requested. The type should be the same
     * as or extend the type for this mapping. A SystemSingletonProvider is used for
     * the mapping.
     *
     * @param type The type of the single instance to be created. If omitted, the type of the
     * mapping is used.
     * @return This StateSystemMapping, so more modifications can be applied
     */

    EngineState.prototype.addSingleton = function(type) {
      return this.addProvider(new SystemSingletonProvider(type));
    };


    /*
     * Creates a mapping for the System type to a method call.
     * The method should return a System instance. A DynamicSystemProvider is used for
     * the mapping.
     *
     * @param method The method to provide the System instance.
     * @return This StateSystemMapping, so more modifications can be applied.
     */

    EngineState.prototype.addMethod = function(method) {
      return this.addProvider(new DynamicSystemProvider(method));
    };


    /*
     * Adds any SystemProvider.
     *
     * @param provider The component provider to use.
     * @return This StateSystemMapping, so more modifications can be applied.
     */

    EngineState.prototype.addProvider = function(provider) {
      var mapping;
      mapping = new StateSystemMapping(this, provider);
      this.providers.push(provider);
      return mapping;
    };

    return EngineState;

  })();

}).call(this);

//# sourceMappingURL=EngineState.js.map
