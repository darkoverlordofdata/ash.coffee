// Generated by CoffeeScript 1.9.3

/*
 * An object pool for re-using components. This is not integrated in to Ash but is used dierectly by
 * the developer. It expects components to not require any parameters in their constructor.
 *
 * <p>Fetch an object from the pool with</p>
 *
 * <p>ComponentPool.get( ComponentClass );</p>
 *
 * <p>If the pool contains an object of the required type, it will be returned. If it does not, a new object
 * will be created and returned.</p>
 *
 * <p>The object returned may have properties set on it from the time it was previously used, so all properties
 * should be reset in the object once it is received.</p>
 *
 * <p>Add an object to the pool with</p>
 *
 * <p>ComponentPool.dispose( component );</p>
 *
 * <p>You will usually want to do this when removing a component from an entity. The remove method on the entity
 * returns the component that was removed, so this can be done in one line of code like this</p>
 *
 * <p>ComponentPool.dispose( entity.remove( component ) );</p>
 */

(function() {
  'use strict';
  var Dictionary,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Dictionary = ash.ext.Dictionary;

  ash.tools.ComponentPool = (function() {
    var getPool, pools;

    function ComponentPool() {}

    pools = new Dictionary();

    getPool = function(componentClass) {
      var ref;
      if ((ref = componentClass.className, indexOf.call(pools, ref) >= 0)) {
        return pools[componentClass.className];
      } else {
        return pools[componentClass.className] = [];
      }
    };


    /*
     * Get an object from the pool.
     *
     * @param componentClass The type of component wanted.
     * @return The component.
     */

    ComponentPool.get = function(componentClass) {
      var pool;
      pool = getPool(componentClass);
      if (pool.length > 0) {
        return pool.pop();
      } else {
        return new componentClass();
      }
    };


    /*
     * Return an object to the pool for reuse.
     *
     * @param component The component to return to the pool.
     */

    ComponentPool.dispose = function(component) {
      var pool, type;
      if (component) {
        type = component.constructor;
        pool = getPool(type);
        pool.push(component);
      }
    };


    /*
     * Dispose of all pooled resources, freeing them for garbage collection.
     */

    ComponentPool.empty = function() {
      return pools = new Dictionary();
    };

    return ComponentPool;

  })();

}).call(this);

//# sourceMappingURL=ComponentPool.js.map
