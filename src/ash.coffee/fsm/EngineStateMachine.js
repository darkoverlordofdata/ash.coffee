// Generated by CoffeeScript 1.9.0

/*
 * This is a state machine for the Engine. The state machine manages a set of states,
 * each of which has a set of System providers. When the state machine changes the state, it removes
 * Systems associated with the previous state and adds Systems associated with the new state.
 */

(function() {
  'use strict';
  var Dictionary, EngineState;

  Dictionary = ash.ext.Dictionary;

  EngineState = ash.fsm.EngineState;

  ash.fsm.EngineStateMachine = (function() {

    /**
     * @type {ash.core.Engine}
     */
    EngineStateMachine.prototype.engine = null;


    /**
     * @type {ash.ext.Dictionary}
     */

    EngineStateMachine.prototype.states = null;


    /**
     * @type {ash.fsm.EngineState}
     */

    EngineStateMachine.prototype.currentState = null;


    /**
     * Creates an SystemStateMachine.
     * @constructor 
     * @param {ash.core.Engine} engine
     */

    function EngineStateMachine(_at_engine) {
      this.engine = _at_engine;
      this.states = new Dictionary();
    }


    /**
     * Add a state to this state machine.
     *
     * @param {string} name The name of this state - used to identify it later in the changeState method call.
     * @param {ash.fsm.EngineState} state The state.
     * @return {ash.fsm.EngineStateMachine} This state machine, so methods can be chained.
     */

    EngineStateMachine.prototype.addState = function(name, state) {
      this.states[name] = state;
      return this;
    };


    /**
     * Create a new state in this state machine.
     *
     * @param {string} name The name of the new state - used to identify it later in the changeState method call.
     * @return {ash.fsm.EngineState} The new EntityState object that is the state. This will need to be configured with
     * the appropriate component providers.
     */

    EngineStateMachine.prototype.createState = function(name) {
      var state;
      state = new EngineState();
      this.states[name] = state;
      return this;
    };


    /**
     * Change to a new state. The Systems from the old state will be removed and the Systems
     * for the new state will be added.
     *
     * @param {string} name The name of the state to change to.
     */

    EngineStateMachine.prototype.changeState = function(name) {
      var each, id, newState, other, provider, toAdd, _ref, _ref1;
      newState = this.states[name];
      if (newState == null) {
        throw new Error("Engine state " + name + " doesn't exist");
      }
      if (newState === this.currentState) {
        newState = null;
        return;
      }
      toAdd = new Dictionary();
      _ref = newState.providers;
      for (each in _ref) {
        provider = _ref[each];
        id = provider.getIdentifier();
        toAdd[id] = provider;
      }
      if (currentState) {
        _ref1 = this.currentState.providers;
        for (each in _ref1) {
          provider = _ref1[each];
          id = provider.getIdentifier();
          other = toAdd[id];
          if (other) {
            delete toAdd[id];
          } else {
            this.engine.removeSystem(provider.getSystem());
          }
        }
      }
      for (each in toAdd) {
        provider = toAdd[each];
        this.engine.addSystem(provider.getSystem(), provider.priority);
      }
      return this.currentState = newState;
    };

    return EngineStateMachine;

  })();

}).call(this);

//# sourceMappingURL=EngineStateMachine.js.map
