{"version":3,"sources":["prolog.js","phaser_engine.js","phaser_entity.js","phaser_plugin.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACncxfile":"ash.js","sourcesContent":["// Generated by CoffeeScript 1.9.1\n\n/*\n\n   _       _\n  /_\\  ___| |__\n //_\\\\/ __| '_ \\\n/  _  \\__ \\ | | |\n\\_/ \\_/___/_| |_|\n\n              __  __\n    ___ ___  / _|/ _| ___  ___\n   / __/ _ \\| |_| |_ / _ \\/ _ \\\n  | (_| (_) |  _|  _|  __/  __/\n (_)___\\___/|_| |_|  \\___|\\___|\n\n\nCopyright (c) 2015 Bruce Davidson &lt;darkoverlordofdata@gmail.com&gt;\n\nAuthor: Richard Lord\nCopyright (c) Richard Lord 2011-2012\nhttp://www.richardlord.net\n\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n(function() {\n  'use strict';\n  var Dictionary, ash;\n\n  ash = {\n    signals: {},\n    core: {},\n    ext: {\n      Dictionary: Dictionary = (function() {\n\n        /*\n         * Get Class Name\n        \n          closure compiler changes the class name, or sets it to ''\n          In that case, add a static className property to all\n          Nodes and Components so they can be identified.\n         */\n        function Dictionary() {}\n\n        return Dictionary;\n\n      })(),\n      getClassName: function(klass) {\n        var ref;\n        return (ref = klass.className) != null ? ref : klass.name;\n      }\n    },\n    fsm: {},\n    tick: {},\n    tools: {}\n  };\n\n\n  /*\n   * Export ash\n   */\n\n  if ('function' === typeof define && (define.amd != null)) {\n    define(function() {\n      return ash;\n    });\n  } else {\n    this['ash'] = ash;\n  }\n\n}).call(this);\n\n//# sourceMappingURL=prolog.js.map\n","// Generated by CoffeeScript 1.9.1\n\n/*\n * The Engine class is the central point for creating and managing your game state. Add\n * entities and systems to the engine, and fetch families of nodes from the engine.\n *\n * This version is implemented as a Phaser Plugin. It uses the Phaser postRender cycle\n * to provide tick for the ash engine update.\n *\n * Use this version if the phaser update cycle clashes with Ash updates\n */\n\n(function() {\n  var PhaserEngine,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  if (typeof Phaser !== \"undefined\" && Phaser !== null) {\n    ash.ext.PhaserEngine = PhaserEngine = (function(superClass) {\n      extend(PhaserEngine, superClass);\n\n      PhaserEngine.prototype.entityNames = null;\n\n      PhaserEngine.prototype.entityList = null;\n\n      PhaserEngine.prototype.systemList = null;\n\n      PhaserEngine.prototype.families = null;\n\n      PhaserEngine.prototype.nodes = null;\n\n      PhaserEngine.prototype.components = null;\n\n\n      /*\n       * Phaser.Plugin members\n       */\n\n      PhaserEngine.prototype.game = null;\n\n      PhaserEngine.prototype.parent = null;\n\n      PhaserEngine.prototype.active = true;\n\n      PhaserEngine.prototype.visible = true;\n\n      PhaserEngine.prototype.hasPostRender = true;\n\n\n      /*\n       * Indicates if the engine is currently in its update loop.\n       */\n\n      PhaserEngine.prototype.updating = false;\n\n\n      /*\n       * Dispatched when the update loop ends. If you want to add and remove systems from the\n       * engine it is usually best not to do so during the update loop. To avoid this you can\n       * listen for this signal and make the change when the signal is dispatched.\n       */\n\n      PhaserEngine.prototype.updateComplete = null;\n\n\n      /*\n       * The class used to manage node lists. In most cases the default class is sufficient\n       * but it is exposed here so advanced developers can choose to create and use a\n       * different implementation.\n       *\n       * The class must implement the IFamily interface.\n       */\n\n      PhaserEngine.prototype.familyClass = ComponentMatchingFamily;\n\n\n      /*\n       * @param game      the current phaser game context\n       * @param parent    the current phaser state context\n       */\n\n      function PhaserEngine(game, parent) {\n        this.postRender = bind(this.postRender, this);\n        this.removeAllSystems = bind(this.removeAllSystems, this);\n        this.removeSystem = bind(this.removeSystem, this);\n        this.getSystem = bind(this.getSystem, this);\n        this.addSystem = bind(this.addSystem, this);\n        this.releaseNodeList = bind(this.releaseNodeList, this);\n        this.getNodeList = bind(this.getNodeList, this);\n        this.componentRemoved = bind(this.componentRemoved, this);\n        this.componentAdded = bind(this.componentAdded, this);\n        this.removeAllEntities = bind(this.removeAllEntities, this);\n        this.getEntityByName = bind(this.getEntityByName, this);\n        this.entityNameChanged = bind(this.entityNameChanged, this);\n        this.removeEntity = bind(this.removeEntity, this);\n        this.addEntity = bind(this.addEntity, this);\n        this.init = bind(this.init, this);\n        PhaserEngine.__super__.constructor.call(this, game, parent);\n        this.nodes = {};\n        this.components = {};\n        this.entityList = new EntityList();\n        this.entityNames = new Dictionary();\n        this.systemList = new SystemList();\n        this.families = new Dictionary();\n        this.updateComplete = new Signal0();\n      }\n\n      PhaserEngine.prototype.addNode = function(name, def) {\n        var property, ref, type;\n        if (def.components == null) {\n          def.components = {};\n          ref = def.prototype;\n          for (property in ref) {\n            if (!hasProp.call(ref, property)) continue;\n            type = ref[property];\n            def.components[property] = type;\n            def.prototype[property] = null;\n          }\n          def.prototype.entity = null;\n          def.prototype.previous = null;\n          def.prototype.next = null;\n        }\n        return this.nodes[name] = def;\n      };\n\n      PhaserEngine.prototype.init = function(nodes, components) {\n\n        /*\n         * register components\n         */\n        var klass, name, property, ref, results, type;\n        if (components != null) {\n          for (name in components) {\n            klass = components[name];\n            this.components[name] = klass;\n          }\n        }\n\n        /*\n         * register nodes\n         */\n        if (nodes != null) {\n          results = [];\n          for (name in nodes) {\n            klass = nodes[name];\n\n            /*\n             * convert template to an actual node class\n             */\n            if (klass.components == null) {\n              klass.components = {};\n              ref = klass.prototype;\n              for (property in ref) {\n                if (!hasProp.call(ref, property)) continue;\n                type = ref[property];\n                klass.components[property] = type;\n                klass.prototype[property] = null;\n              }\n              klass.prototype.entity = null;\n              klass.prototype.previous = null;\n              klass.prototype.next = null;\n            }\n            if (components != null) {\n              results.push(this.nodes[name] = klass);\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        }\n      };\n\n      Object.defineProperties(PhaserEngine.prototype, {\n\n        /*\n         * Returns a vector containing all the entities in the engine.\n         */\n        entities: {\n          get: function() {\n            var entities, entity;\n            entities = [];\n            entity = this.entityList.head;\n            while (entity) {\n              this.entities.push(entity);\n              entity = entity.next;\n            }\n            return entities;\n          }\n\n          /*\n           * Returns a vector containing all the systems in the engine.\n           */\n        },\n        systems: {\n          get: function() {\n            var system, systems;\n            systems = [];\n            system = this.systemList.head;\n            while (system) {\n              systems.push(system);\n              system = system.next;\n            }\n            return systems;\n          }\n        }\n      });\n\n\n      /*\n       * Add an entity to the engine.\n       *\n       * @param entity The entity to add.\n       */\n\n      PhaserEngine.prototype.addEntity = function(entity) {\n        var each, family, ref;\n        if (this.entityNames[entity.name]) {\n          throw \"The entity name \" + entity.name + \" is already in use by another entity.\";\n        }\n        this.entityList.add(entity);\n        this.entityNames[entity.name] = entity;\n        entity.componentAdded.add(this.componentAdded);\n        entity.componentRemoved.add(this.componentRemoved);\n        entity.nameChanged.add(this.entityNameChanged);\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.newEntity(entity);\n        }\n      };\n\n\n      /*\n       * Remove an entity from the engine.\n       *\n       * @param entity The entity to remove.\n       */\n\n      PhaserEngine.prototype.removeEntity = function(entity) {\n        var each, family, ref;\n        entity.componentAdded.remove(this.componentAdded);\n        entity.componentRemoved.remove(this.componentRemoved);\n        entity.nameChanged.remove(this.entityNameChanged);\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.removeEntity(entity);\n        }\n        delete this.entityNames[entity.name];\n        this.entityList.remove(entity);\n      };\n\n      PhaserEngine.prototype.entityNameChanged = function(entity, oldName) {\n        if (this.entityNames[oldName] === entity) {\n          delete this.entityNames[oldName];\n          this.entityNames[entity.name] = entity;\n        }\n      };\n\n\n      /*\n       * Get an entity based n its name.\n       *\n       * @param name The name of the entity\n       * @return The entity, or null if no entity with that name exists on the engine\n       */\n\n      PhaserEngine.prototype.getEntityByName = function(name) {\n        return this.entityNames[name];\n      };\n\n\n      /*\n       * Remove all entities from the engine.\n       */\n\n      PhaserEngine.prototype.removeAllEntities = function() {\n        while (this.entityList.head !== null) {\n          this.removeEntity(this.entityList.head);\n        }\n      };\n\n\n      /*\n       @private\n       */\n\n      PhaserEngine.prototype.componentAdded = function(entity, componentClass) {\n        var each, family, ref;\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.componentAddedToEntity(entity, componentClass);\n        }\n      };\n\n\n      /*\n       @private\n       */\n\n      PhaserEngine.prototype.componentRemoved = function(entity, componentClass) {\n        var each, family, ref;\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.componentRemovedFromEntity(entity, componentClass);\n        }\n      };\n\n\n      /*\n       * Get a collection of nodes from the engine, based on the type of the node required.\n       *\n       * <p>The engine will create the appropriate NodeList if it doesn't already exist and\n       * will keep its contents up to date as entities are added to and removed from the\n       * engine.</p>\n       *\n       * <p>If a NodeList is no longer required, release it with the releaseNodeList method.</p>\n       *\n       * @param nodeClass The type of node required.\n       * @return A linked list of all nodes of this type from all entities in the engine.\n       */\n\n      PhaserEngine.prototype.getNodeList = function(nodeClass) {\n        var entity, family;\n        if (nodeClass.name in this.families) {\n          return this.families[nodeClass.name].nodeList;\n        }\n        family = new this.familyClass(nodeClass, this);\n        this.families[nodeClass.name] = family;\n        entity = this.entityList.head;\n        while (entity) {\n          family.newEntity(entity);\n          entity = entity.next;\n        }\n        return family.nodeList;\n      };\n\n\n      /*\n       * If a NodeList is no longer required, this method will stop the engine updating\n       * the list and will release all references to the list within the framework\n       * classes, enabling it to be garbage collected.\n       *\n       * <p>It is not essential to release a list, but releasing it will free\n       * up memory and processor resources.</p>\n       *\n       * @param nodeClass The type of the node class if the list to be released.\n       */\n\n      PhaserEngine.prototype.releaseNodeList = function(nodeClass) {\n        if (nodeClass.name in this.families) {\n          this.families[nodeClass.name].cleanUp();\n          delete this.families[nodeClass.name];\n        }\n      };\n\n\n      /*\n       * Add a system to the engine, and set its priority for the order in which the\n       * systems are updated by the engine update loop.\n       *\n       * <p>The priority dictates the order in which the systems are updated by the engine update\n       * loop. Lower numbers for priority are updated first. i.e. a priority of 1 is\n       * updated before a priority of 2.</p>\n       *\n       * @param system The system to add to the engine.\n       * @param priority The priority for updating the systems during the engine loop. A\n       * lower number means the system is updated sooner.\n       */\n\n      PhaserEngine.prototype.addSystem = function(system, priority) {\n        system.priority = priority;\n        system.addToEngine(this);\n        this.systemList.add(system);\n      };\n\n\n      /*\n       * Get the system instance of a particular type from within the engine.\n       *\n       * @param type The type of system\n       * @return The instance of the system type that is in the engine, or\n       * null if no systems of this type are in the engine.\n       */\n\n      PhaserEngine.prototype.getSystem = function(type) {\n        return systemList.get(type);\n      };\n\n\n      /*\n       * Remove a system from the engine.\n       *\n       * @param system The system to remove from the engine.\n       */\n\n      PhaserEngine.prototype.removeSystem = function(system) {\n        this.systemList.remove(system);\n        system.removeFromEngine(this);\n      };\n\n\n      /*\n       * Remove all systems from the engine.\n       */\n\n      PhaserEngine.prototype.removeAllSystems = function() {\n        while (this.systemList.head !== null) {\n          this.removeSystem(this.systemList.head);\n        }\n      };\n\n\n      /*\n       * postRender\n       *\n       * Phaser.Plugin interface\n       *\n       * Update the engine. This causes the engine update loop to run, calling update on all the\n       * systems in the engine.\n       *\n       * <p>The package ash.tick contains classes that can be used to provide\n       * a steady or variable tick that calls this update method.</p>\n       *\n       * @time The duration, in seconds, of this update step.\n       */\n\n      PhaserEngine.prototype.postRender = function() {\n        var system, time;\n        time = this.game.time.elapsed * 0.001;\n        this.updating = true;\n        system = this.systemList.head;\n        while (system) {\n          system.update(time);\n          system = system.next;\n        }\n        this.updating = false;\n        this.updateComplete.dispatch();\n      };\n\n      return PhaserEngine;\n\n    })(Phaser.Plugin);\n  }\n\n}).call(this);\n\n//# sourceMappingURL=phaser_engine.js.map\n","// Generated by CoffeeScript 1.9.1\n\n/*\n  After reading http://www.paolodistefano.com/2015/01/18/ecs2/,\n  I tried making entity inherit from Sprite. Turns out this can't work.\n  Sprite already has a component collection named components.\n\n  While we could re-implement ash so that there are no named collisions when merging into\n  Sprite, the whole super object approach is a bad idea, and why we are using ecs in the\n  first place ;)\n\n  Sprite should be a component of an entity, just like everything else\n */\n\n\n/*\n * An entity is composed from components. As such, it is essentially a collection object for components.\n * Sometimes, the entities in a game will mirror the actual characters and objects in the game, but this\n * is not necessary.\n *\n * <p>Components are simple value objects that contain data relevant to the entity. Entities\n * with similar functionality will have instances of the same components. So we might have\n * a position component</p>\n *\n * <p><code>class PositionComponent\n * {\n *   public var x:Float;\n *   public var y:Float;\n * }</code></p>\n *\n * <p>All entities that have a position in the game world, will have an instance of the\n * position component. Systems operate on entities based on the components they have.</p>\n */\n\n(function() {\n  var PhaserEntity,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  if (typeof Phaser !== \"undefined\" && Phaser !== null) {\n    ash.ext.PhaserEntity = PhaserEntity = (function(superClass) {\n      var nameCount;\n\n      extend(PhaserEntity, superClass);\n\n      nameCount = 0;\n\n\n      /*\n       * Optional, give the entity a name. This can help with debugging and with serialising the entity.\n       */\n\n      PhaserEntity.prototype._name = '';\n\n\n      /*\n       * This signal is dispatched when a component is added to the entity.\n       */\n\n      PhaserEntity.prototype.componentAdded = null;\n\n\n      /*\n       * This signal is dispatched when a component is removed from the entity.\n       */\n\n      PhaserEntity.prototype.componentRemoved = null;\n\n\n      /*\n       * Dispatched when the name of the entity changes. Used internally by the engine to track entities based on their names.\n       */\n\n      PhaserEntity.prototype.nameChanged = null;\n\n      PhaserEntity.prototype.previous = null;\n\n      PhaserEntity.prototype.next = null;\n\n      PhaserEntity.prototype.components = null;\n\n      function PhaserEntity(game, key, name) {\n        if (name == null) {\n          name = '';\n        }\n        PhaserEntity.__super__.constructor.call(this, game, 0, 0, key);\n        Object.defineProperties(this, {\n\n          /*\n           * All entities have a name. If no name is set, a default name is used. Names are used to\n           * fetch specific entities from the engine, and can also help to identify an entity when debugging.\n           */\n          name: {\n            get: function() {\n              return this._name;\n            },\n            set: function(value) {\n              var previous;\n              if (this._name !== value) {\n                previous = this._name;\n                this._name = value;\n                return this.nameChanged.dispatch(this, previous);\n              }\n            }\n          }\n        });\n        this.componentAdded = new Signal2();\n        this.componentRemoved = new Signal2();\n        this.nameChanged = new Signal2();\n        this.components = new Dictionary();\n        if (name !== '') {\n          this._name = name;\n        } else {\n          this._name = \"_entity\" + (++nameCount);\n        }\n      }\n\n\n      /*\n       * Add a component to the entity.\n       *\n       * @param component The component object to add.\n       * @param componentClass The class of the component. This is only necessary if the component\n       * extends another component class and you want the framework to treat the component as of\n       * the base class type. If not set, the class type is determined directly from the component.\n       *\n       * @return A reference to the entity. This enables the chaining of calls to add, to make\n       * creating and configuring entities cleaner. e.g.\n       *\n       * <code>var entity:Entity = new Entity()\n       *     .add(new Position(100, 200)\n       *     .add(new Display(new PlayerClip());</code>\n       */\n\n      PhaserEntity.prototype.add = function(component, componentClass) {\n        if (componentClass == null) {\n          componentClass = component.constructor;\n        }\n        if (componentClass.className in this.components) {\n          this.remove(componentClass);\n        }\n        this.components[componentClass.className] = component;\n        this.componentAdded.dispatch(this, componentClass);\n        return this;\n      };\n\n\n      /*\n       * Remove a component from the entity.\n       *\n       * @param componentClass The class of the component to be removed.\n       * @return the component, or null if the component doesn't exist in the entity\n       */\n\n      PhaserEntity.prototype.remove = function(componentClass) {\n        var component, name;\n        name = componentClass.className != null ? componentClass.className : componentClass;\n        component = this.components[name];\n        if (component) {\n          delete this.components[name];\n          this.componentRemoved.dispatch(this, name);\n          return component;\n        }\n        return null;\n      };\n\n\n      /*\n       * Get a component from the entity.\n       *\n       * @param componentClass The class of the component requested.\n       * @return The component, or null if none was found.\n       */\n\n      PhaserEntity.prototype.get = function(componentClass) {\n        return this.components[componentClass.className];\n      };\n\n\n      /*\n       * Get all components from the entity.\n       *\n       * @return An array containing all the components that are on the entity.\n       */\n\n      PhaserEntity.prototype.getAll = function() {\n        var component, componentArray, i, len, ref;\n        componentArray = [];\n        ref = this.components;\n        for (i = 0, len = ref.length; i < len; i++) {\n          component = ref[i];\n          componentArray.push(component);\n        }\n        return componentArray;\n      };\n\n\n      /*\n       * Does the entity have a component of a particular type.\n       *\n       * @param componentClass The class of the component sought.\n       * @return true if the entity has a component of the type, false if not.\n       */\n\n      PhaserEntity.prototype.has = function(componentClass) {\n        return componentClass.className in this.components;\n      };\n\n      return PhaserEntity;\n\n    })(Phaser.Sprite);\n  }\n\n}).call(this);\n\n//# sourceMappingURL=phaser_entity.js.map\n","// Generated by CoffeeScript 1.9.1\n\n/*\n * The Engine class is the central point for creating and managing your game state. Add\n * entities and systems to the engine, and fetch families of nodes from the engine.\n *\n * This version is implemented as a Phaser Plugin. It uses the Phaser update cycle\n * to provide tick for the ash engine update.\n *\n * Use this version if Phaser drives the updates\n */\n\n(function() {\n  var PhaserPlugin,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  if (typeof Phaser !== \"undefined\" && Phaser !== null) {\n    ash.ext.PhaserPlugin = PhaserPlugin = (function(superClass) {\n      extend(PhaserPlugin, superClass);\n\n      PhaserPlugin.prototype.entityNames = null;\n\n      PhaserPlugin.prototype.entityList = null;\n\n      PhaserPlugin.prototype.systemList = null;\n\n      PhaserPlugin.prototype.families = null;\n\n      PhaserPlugin.prototype.nodes = null;\n\n      PhaserPlugin.prototype.components = null;\n\n\n      /*\n       * Phaser.Plugin members\n       */\n\n      PhaserPlugin.prototype.game = null;\n\n      PhaserPlugin.prototype.parent = null;\n\n      PhaserPlugin.prototype.active = true;\n\n      PhaserPlugin.prototype.visible = true;\n\n      PhaserPlugin.prototype.hasPostRender = true;\n\n\n      /*\n       * Indicates if the engine is currently in its update loop.\n       */\n\n      PhaserPlugin.prototype.updating = false;\n\n\n      /*\n       * Dispatched when the update loop ends. If you want to add and remove systems from the\n       * engine it is usually best not to do so during the update loop. To avoid this you can\n       * listen for this signal and make the change when the signal is dispatched.\n       */\n\n      PhaserPlugin.prototype.updateComplete = null;\n\n\n      /*\n       * The class used to manage node lists. In most cases the default class is sufficient\n       * but it is exposed here so advanced developers can choose to create and use a\n       * different implementation.\n       *\n       * The class must implement the IFamily interface.\n       */\n\n      PhaserPlugin.prototype.familyClass = ComponentMatchingFamily;\n\n\n      /*\n       * @param game      the current phaser game context\n       * @param parent    the current phaser state context\n       */\n\n      function PhaserPlugin(game, parent) {\n        this.update = bind(this.update, this);\n        this.removeAllSystems = bind(this.removeAllSystems, this);\n        this.removeSystem = bind(this.removeSystem, this);\n        this.getSystem = bind(this.getSystem, this);\n        this.addSystem = bind(this.addSystem, this);\n        this.releaseNodeList = bind(this.releaseNodeList, this);\n        this.getNodeList = bind(this.getNodeList, this);\n        this.componentRemoved = bind(this.componentRemoved, this);\n        this.componentAdded = bind(this.componentAdded, this);\n        this.removeAllEntities = bind(this.removeAllEntities, this);\n        this.getEntityByName = bind(this.getEntityByName, this);\n        this.entityNameChanged = bind(this.entityNameChanged, this);\n        this.removeEntity = bind(this.removeEntity, this);\n        this.addEntity = bind(this.addEntity, this);\n        this.init = bind(this.init, this);\n        PhaserPlugin.__super__.constructor.call(this, game, parent);\n        this.nodes = {};\n        this.components = {};\n        this.entityList = new EntityList();\n        this.entityNames = new Dictionary();\n        this.systemList = new SystemList();\n        this.families = new Dictionary();\n        this.updateComplete = new Signal0();\n      }\n\n      PhaserPlugin.prototype.addNode = function(name, def) {\n        var property, ref, type;\n        if (def.components == null) {\n          def.components = {};\n          ref = def.prototype;\n          for (property in ref) {\n            if (!hasProp.call(ref, property)) continue;\n            type = ref[property];\n            def.components[property] = type;\n            def.prototype[property] = null;\n          }\n          def.prototype.entity = null;\n          def.prototype.previous = null;\n          def.prototype.next = null;\n        }\n        return this.nodes[name] = def;\n      };\n\n      PhaserPlugin.prototype.init = function(nodes, components) {\n\n        /*\n         * register components\n         */\n        var klass, name, property, ref, results, type;\n        if (components != null) {\n          for (name in components) {\n            klass = components[name];\n            this.components[name] = klass;\n          }\n        }\n\n        /*\n         * register nodes\n         */\n        if (nodes != null) {\n          results = [];\n          for (name in nodes) {\n            klass = nodes[name];\n\n            /*\n             * convert template to an actual node class\n             */\n            if (klass.components == null) {\n              klass.components = {};\n              ref = klass.prototype;\n              for (property in ref) {\n                if (!hasProp.call(ref, property)) continue;\n                type = ref[property];\n                klass.components[property] = type;\n                klass.prototype[property] = null;\n              }\n              klass.prototype.entity = null;\n              klass.prototype.previous = null;\n              klass.prototype.next = null;\n            }\n            if (components != null) {\n              results.push(this.nodes[name] = klass);\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        }\n      };\n\n      Object.defineProperties(PhaserPlugin.prototype, {\n\n        /*\n         * Returns a vector containing all the entities in the engine.\n         */\n        entities: {\n          get: function() {\n            var entities, entity;\n            entities = [];\n            entity = this.entityList.head;\n            while (entity) {\n              this.entities.push(entity);\n              entity = entity.next;\n            }\n            return entities;\n          }\n\n          /*\n           * Returns a vector containing all the systems in the engine.\n           */\n        },\n        systems: {\n          get: function() {\n            var system, systems;\n            systems = [];\n            system = this.systemList.head;\n            while (system) {\n              systems.push(system);\n              system = system.next;\n            }\n            return systems;\n          }\n        }\n      });\n\n\n      /*\n       * Add an entity to the engine.\n       *\n       * @param entity The entity to add.\n       */\n\n      PhaserPlugin.prototype.addEntity = function(entity) {\n        var each, family, ref;\n        if (this.entityNames[entity.name]) {\n          throw \"The entity name \" + entity.name + \" is already in use by another entity.\";\n        }\n        this.entityList.add(entity);\n        this.entityNames[entity.name] = entity;\n        entity.componentAdded.add(this.componentAdded);\n        entity.componentRemoved.add(this.componentRemoved);\n        entity.nameChanged.add(this.entityNameChanged);\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.newEntity(entity);\n        }\n      };\n\n\n      /*\n       * Remove an entity from the engine.\n       *\n       * @param entity The entity to remove.\n       */\n\n      PhaserPlugin.prototype.removeEntity = function(entity) {\n        var each, family, ref;\n        entity.componentAdded.remove(this.componentAdded);\n        entity.componentRemoved.remove(this.componentRemoved);\n        entity.nameChanged.remove(this.entityNameChanged);\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.removeEntity(entity);\n        }\n        delete this.entityNames[entity.name];\n        this.entityList.remove(entity);\n      };\n\n      PhaserPlugin.prototype.entityNameChanged = function(entity, oldName) {\n        if (this.entityNames[oldName] === entity) {\n          delete this.entityNames[oldName];\n          this.entityNames[entity.name] = entity;\n        }\n      };\n\n\n      /*\n       * Get an entity based n its name.\n       *\n       * @param name The name of the entity\n       * @return The entity, or null if no entity with that name exists on the engine\n       */\n\n      PhaserPlugin.prototype.getEntityByName = function(name) {\n        return this.entityNames[name];\n      };\n\n\n      /*\n       * Remove all entities from the engine.\n       */\n\n      PhaserPlugin.prototype.removeAllEntities = function() {\n        while (this.entityList.head !== null) {\n          this.removeEntity(this.entityList.head);\n        }\n      };\n\n\n      /*\n       @private\n       */\n\n      PhaserPlugin.prototype.componentAdded = function(entity, componentClass) {\n        var each, family, ref;\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.componentAddedToEntity(entity, componentClass);\n        }\n      };\n\n\n      /*\n       @private\n       */\n\n      PhaserPlugin.prototype.componentRemoved = function(entity, componentClass) {\n        var each, family, ref;\n        ref = this.families;\n        for (each in ref) {\n          family = ref[each];\n          family.componentRemovedFromEntity(entity, componentClass);\n        }\n      };\n\n\n      /*\n       * Get a collection of nodes from the engine, based on the type of the node required.\n       *\n       * <p>The engine will create the appropriate NodeList if it doesn't already exist and\n       * will keep its contents up to date as entities are added to and removed from the\n       * engine.</p>\n       *\n       * <p>If a NodeList is no longer required, release it with the releaseNodeList method.</p>\n       *\n       * @param nodeClass The type of node required.\n       * @return A linked list of all nodes of this type from all entities in the engine.\n       */\n\n      PhaserPlugin.prototype.getNodeList = function(nodeClass) {\n        var entity, family;\n        if (nodeClass.name in this.families) {\n          return this.families[nodeClass.name].nodeList;\n        }\n        family = new this.familyClass(nodeClass, this);\n        this.families[nodeClass.name] = family;\n        entity = this.entityList.head;\n        while (entity) {\n          family.newEntity(entity);\n          entity = entity.next;\n        }\n        return family.nodeList;\n      };\n\n\n      /*\n       * If a NodeList is no longer required, this method will stop the engine updating\n       * the list and will release all references to the list within the framework\n       * classes, enabling it to be garbage collected.\n       *\n       * <p>It is not essential to release a list, but releasing it will free\n       * up memory and processor resources.</p>\n       *\n       * @param nodeClass The type of the node class if the list to be released.\n       */\n\n      PhaserPlugin.prototype.releaseNodeList = function(nodeClass) {\n        if (nodeClass.name in this.families) {\n          this.families[nodeClass.name].cleanUp();\n          delete this.families[nodeClass.name];\n        }\n      };\n\n\n      /*\n       * Add a system to the engine, and set its priority for the order in which the\n       * systems are updated by the engine update loop.\n       *\n       * <p>The priority dictates the order in which the systems are updated by the engine update\n       * loop. Lower numbers for priority are updated first. i.e. a priority of 1 is\n       * updated before a priority of 2.</p>\n       *\n       * @param system The system to add to the engine.\n       * @param priority The priority for updating the systems during the engine loop. A\n       * lower number means the system is updated sooner.\n       */\n\n      PhaserPlugin.prototype.addSystem = function(system, priority) {\n        system.priority = priority;\n        system.addToEngine(this);\n        this.systemList.add(system);\n      };\n\n\n      /*\n       * Get the system instance of a particular type from within the engine.\n       *\n       * @param type The type of system\n       * @return The instance of the system type that is in the engine, or\n       * null if no systems of this type are in the engine.\n       */\n\n      PhaserPlugin.prototype.getSystem = function(type) {\n        return systemList.get(type);\n      };\n\n\n      /*\n       * Remove a system from the engine.\n       *\n       * @param system The system to remove from the engine.\n       */\n\n      PhaserPlugin.prototype.removeSystem = function(system) {\n        this.systemList.remove(system);\n        system.removeFromEngine(this);\n      };\n\n\n      /*\n       * Remove all systems from the engine.\n       */\n\n      PhaserPlugin.prototype.removeAllSystems = function() {\n        while (this.systemList.head !== null) {\n          this.removeSystem(this.systemList.head);\n        }\n      };\n\n\n      /*\n       * update\n       *\n       * Phaser.Plugin interface\n       *\n       * Update the engine. This causes the engine update loop to run, calling update on all the\n       * systems in the engine.\n       *\n       * <p>The package ash.tick contains classes that can be used to provide\n       * a steady or variable tick that calls this update method.</p>\n       *\n       * @time The duration, in seconds, of this update step.\n       */\n\n      PhaserPlugin.prototype.update = function() {\n        var system, time;\n        time = this.game.time.elapsed * 0.001;\n        this.updating = true;\n        system = this.systemList.head;\n        while (system) {\n          system.update(time);\n          system = system.next;\n        }\n        this.updating = false;\n        this.updateComplete.dispatch();\n      };\n\n      return PhaserPlugin;\n\n    })(Phaser.Plugin);\n  }\n\n}).call(this);\n\n//# sourceMappingURL=phaser_plugin.js.map\n"],"sourceRoot":"/source/"}