// Generated by CoffeeScript 1.9.1

/*
#+--------------------------------------------------------------------+
#| gulpfile.coffee
#+--------------------------------------------------------------------+
#| Copyright DarkOverlordOfData (c) 2014-2015
#+--------------------------------------------------------------------+
#|
#| dart-like workflow
#|
#| dart-like is free software; you can copy, modify, and distribute
#| it under the terms of the MIT License
#|
#+--------------------------------------------------------------------+
#
 * Tasks:
#
 * build   - build lib sources to web/src/{{lib}}, copy to build/web
 * get     - gets packages dependencies using bower
 * publish - publish gh-pages
 * serve   - open build\web\ in browser
 * test    - open web\ in browser 
#
 * manually copy required bits from packages/module to web/src/module
#
 * project
 * | -- bin                    tools
 * | -- build                  output folder for zip
 * | -- example                example using the lib
 * | -- lib                    defines this packages
 * | -- node_modules           npm dependencies
 * | -- packages               bower external packages
 * | -- test                   unit tests
 * | -- (tmp)                  temporary
 * | -- web                    source
 * |     | -- index.html       default web page
 * |     | -- main.js          cocos2d boot
 * |     | -- manifest.json    android 'save to home screen'
 * |     | -- project.json     cocos2d manifest
 * |     | -- frameworks       cocos2d lib
 * |     | -- res              resources
 * |     + -- src              packages + lib
 * |           | -- {lib}
 * |           | -- example
 * |
 * | -- .bowerrc               define ./packages
 * | -- .gitignore             build, node_modules, tmp, packages
 * | -- bower.json             module name, packages
 * | -- csconfig.json          coffee-script project config
 * | -- gulpfile.coffee        this workflow
 * | -- gulpfile.json          gulpfile configuration
 * | -- license.md
 * | -- packages.json          output packages name
 * + -- readme.md
#
 * coffee -cb gulpfile.coffee > gulpfile.js
#
 */

(function() {
  var authorName, bower, bowerDeps, bowerrc, cocos2d, coffee, concat, config, copy, del, dependencies, filter, flatten, fs, gh_pages, gulp, gutil, jsconfig, json, libName, manifest, maps, packages, project, projectName, rename, replace, repository, shell, uglify, webserver;

  require('coffee-script');

  require('coffee-script/register');

  fs = require('fs');

  del = require('del');

  gulp = require('gulp');

  copy = require('gulp-copy');

  gutil = require('gulp-util');

  shell = require('gulp-shell');

  coffee = require('gulp-coffee');

  concat = require('gulp-concat');

  uglify = require('gulp-uglify');

  filter = require('gulp-filter');

  rename = require('gulp-rename');

  flatten = require('gulp-flatten');

  gh_pages = require('gulp-gh-pages');

  manifest = require('gulp-manifest');

  webserver = require('gulp-webserver');

  bowerDeps = require('gulp-bower-deps');

  maps = require('gulp-sourcemaps');

  json = require('gulp-json-editor');

  replace = require('gulp-batch-replace');

  project = require('./package.json');

  bower = require('./bower.json');

  bowerrc = fs.existsSync('./.bowerrc.json') ? require('./.bowerrc.json') : false;

  cocos2d = fs.existsSync('./web/project.json') ? require('./web/project.json') : false;

  jsconfig = fs.existsSync('./jsconfig.json') ? require('./jsconfig.json') : false;

  config = fs.existsSync('./gulpfile.json') ? require('./gulpfile.json') : false;

  packages = cocos2d ? 'src' : 'packages';

  repository = bowerrc ? bowerrc.directory : 'bower_components';

  projectName = project.name;

  authorName = project.author;

  libName = bower.name;

  dependencies = (function() {
    var name, ref, version;
    dependencies = {
      directory: repository,
      deps: {}
    };
    ref = bower.dependencies;
    for (name in ref) {
      version = ref[name];
      dependencies.deps[name] = {
        version: version,
        files: config.packages[name]
      };
    }
    return dependencies;
  })();


  /*
  task: build
  
    create the outputs
    create appcache manifest
   */

  gulp.task('build', ['output'], function() {
    return gulp.src(['build/web/**/*.*']).pipe(manifest({
      hash: true,
      timestamp: true,
      preferOnline: false,
      network: ['*'],
      filename: 'manifest.appcache',
      exclude: 'manifest.appcache'
    })).pipe(gulp.dest('build/web'));
  });


  /*
  task: dist
  
    create the dist
   */

  gulp.task('dist', ['dist0'], function() {
    return gulp.src("build/" + libName + ".min.js").pipe(uglify({
      mangle: false
    })).pipe(gulp.dest("build/"));
  });


  /*
  task: serve
  
    serve the build folder
   */

  gulp.task('serve', function() {
    gulp.src('./build/web').pipe(webserver({
      livereload: false,
      open: true
    }));
  });


  /*
  task: test
  
    serve the web folder
   */

  gulp.task('test', function() {});


  /*
  task: get
  
    get dependencies
   */

  gulp.task('get', ['dependencies'], function() {
    var dest, file, patch, ref, results;
    ref = config.patch;
    results = [];
    for (dest in ref) {
      patch = ref[dest];
      results.push((function() {
        var results1;
        results1 = [];
        for (file in patch) {
          patch = patch[file];
          "web/" + packages + "/" + dest + "/" + file;
          console.log('patch', "web/" + packages + "/" + dest + "/" + file);
          results1.push(gulp.src("web/" + packages + "/" + dest + "/" + file).pipe(replace(patch)).pipe(gulp.dest("web/" + packages + "/" + dest)));
        }
        return results1;
      })());
    }
    return results;
  });


  /*
  task: publish
  
    publish to github gh-pages
   */

  gulp.task('publish', function() {
    return gulp.src("./build/web/**/*.*").pipe(gh_pages());
  });


  /*
  task: android
  
    copy build to android project
   */

  gulp.task('android', function() {
    return gulp.src(["build/web/" + packages + "/**/*.*", "build/web/res/**/*.*", "build/web/index.html", "build/web/main.js", "build/web/project.json"]).pipe(copy("web/frameworks/runtime-src/" + libName + "/web/src/main/assets/", {
      prefix: 2
    }));
  });

  gulp.task('default', ['test']);


  /*
  task: clean
  
    deletes all build files
   */

  gulp.task('clean', function(next) {
    del(['build'], next);
  });


  /*
  task: res
  
    copy the res files from
    lib/res to web/res
   */

  gulp.task('res', ['clean'], function() {
    return gulp.src(["lib/res/**/*.*"]).pipe(copy("web", {
      prefix: 1
    }));
  });


  /*
  task: output
  
    create the outputs
    copy lib/res to web
    copies the web folder to the build folder
    skip cocos2d runtime and tools
   */

  gulp.task('output', ['js', 'res'], function() {
    return gulp.src(["web/" + packages + "/**/**/*.*", "!web/" + packages + "/" + libName + "/**/*", "web/res/**/*.*", "web/index.html", "web/license.md", "web/main.js", "web/manifest.json", "web/readme.md"]).pipe(copy('build'));
  });


  /*
  task: js
  
    concat and minify all the js files
   */

  gulp.task('js', ['clean'], function() {
    var i, jsList, len, name, ref, source;
    if (cocos2d) {
      jsList = [];
      source = [];
      ref = cocos2d.jsList;
      for (i = 0, len = ref.length; i < len; i++) {
        name = ref[i];
        if (name.indexOf("src/" + libName) === 0) {
          source.push(name.replace("src/", "web/src/"));
        } else {
          jsList.push(name);
        }
      }
      jsList.push("src/" + libName + "/" + libName + ".min.js");
      gulp.src(source).pipe(concat(libName + ".min.js")).pipe(uglify({
        mangle: false
      })).pipe(gulp.dest("build/web/src/" + libName));
      return gulp.src("web/project.json").pipe(json(function(json) {
        json.jsList = jsList;
        json.showFPS = false;
        json.classReleaseMode = true;
        return json;
      })).pipe(gulp.dest("build/web"));
    } else {
      return gulp.src(["web/" + packages + "/" + libName + "/**/*.*", "!web/" + packages + "/" + libName + "/**/*.map"]).pipe(concat(libName + ".min.js")).pipe(uglify({
        mangle: false
      })).pipe(gulp.dest("build/web/" + packages + "/" + libName));
    }
  });


  /*
  task: dependencies
  
    copy the dependencies from the bower folder
   */

  gulp.task('dependencies', function() {
    return gulp.src(bowerDeps(dependencies).deps).pipe(flatten()).pipe(rename(function(path) {
      path.dirname += '/' + path.basename.split('.')[0];
    })).pipe(gulp.dest("web/" + packages + "/"));
  });

  gulp.task('dist1', function() {
    var ref;
    return gulp.src((ref = jsconfig.files) != null ? ref : "web/" + packages + "/" + libName + "/**/*.js").pipe(maps.init()).pipe(concat(libName + ".js")).pipe(maps.write(".")).pipe(gulp.dest("build/"));
  });

  gulp.task('dist0', ['dist1'], function() {
    return gulp.src("build/" + libName + ".js").pipe(rename(libName + ".min.js")).pipe(gulp.dest("build/"));
  });

}).call(this);
