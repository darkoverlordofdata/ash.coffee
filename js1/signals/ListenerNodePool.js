// Generated by CoffeeScript 1.9.0

/*
 * This internal class maintains a pool of deleted listener nodes for reuse by framework. This reduces
 * the overhead from object creation and garbage collection.
 */
'use strict';
var ListenerNode;

ListenerNode = ash.signals.ListenerNode;


/**
 * @constructor
 */

ash.signals.ListenerNodePool = (function() {
  function ListenerNodePool() {}


  /**
   * @type {ash.signals.ListenerNodePool}
   */

  ListenerNodePool.prototype.tail = null;


  /**
   * @type {ash.signals.ListenerNodePool}
   */

  ListenerNodePool.prototype.cacheTail = null;


  /**
   * Get listener node
   * @return {ash.signals.ListenerNode}
   */

  ListenerNodePool.prototype.get = function() {
    var node;
    if (this.tail !== null) {
      node = this.tail;
      this.tail = this.tail.previous;
      node.previous = null;
      return node;
    } else {
      return new ListenerNode();
    }
  };


  /**
   * Dispose of listener node
   * @param {ash.signals.ListenerNode}
   */

  ListenerNodePool.prototype.dispose = function(node) {
    node.listener = null;
    node.once = false;
    node.next = null;
    node.previous = this.tail;
    this.tail = node;
  };


  /**
   * Cache listener node
   * @param {ash.signals.ListenerNode}
   */

  ListenerNodePool.prototype.cache = function(node) {
    node.listener = null;
    node.previous = this.cacheTail;
    this.cacheTail = node;
  };


  /**
   * Release cache
   */

  ListenerNodePool.prototype.releaseCache = function() {
    var node;
    while (this.cacheTail !== null) {
      node = this.cacheTail;
      this.cacheTail = node.previous;
      node.next = null;
      node.previous = this.tail;
      this.tail = node;
    }
  };

  return ListenerNodePool;

})();
